<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kierke&#39;s Blog</title>
  
  <subtitle>Kierke&#39;s Blog</subtitle>
  <link href="https://sonronzy.github.io/atom.xml" rel="self"/>
  
  <link href="https://sonronzy.github.io/"/>
  <updated>2024-05-11T05:00:48.281Z</updated>
  <id>https://sonronzy.github.io/</id>
  
  <author>
    <name>Kierke</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解：面向对象设计原则</title>
    <link href="https://sonronzy.github.io/2024/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://sonronzy.github.io/2024/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</id>
    <published>2024-05-11T05:00:10.000Z</published>
    <updated>2024-05-11T05:00:48.281Z</updated>
    
    <content type="html"><![CDATA[<br><h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><p>ZHESHI </p><br><br><br><h1 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h1><br><br><br><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href=""></a></li></ul><br><br><br><h1 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a>Remark</h1><blockquote><ol><li>xxx需要再深入学习</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">![]()</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;图片名称&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片无法正常加载展示！&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;70%&quot;</span>&gt;</span></span><br><span class="line">****</span><br></pre></td></tr></table></figure><br><br>]]></content>
    
    
    <summary type="html">深入理解：面向对象设计原则</summary>
    
    
    
    <category term="OOP" scheme="https://sonronzy.github.io/categories/OOP/"/>
    
    
    <category term="OOP" scheme="https://sonronzy.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>《Java设计模式精讲 Debug方式+内存分析》Study Notes</title>
    <link href="https://sonronzy.github.io/2024/%E3%80%8AJava%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B2%BE%E8%AE%B2-Debug%E6%96%B9%E5%BC%8F-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E3%80%8BStudy-Notes/"/>
    <id>https://sonronzy.github.io/2024/%E3%80%8AJava%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B2%BE%E8%AE%B2-Debug%E6%96%B9%E5%BC%8F-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E3%80%8BStudy-Notes/</id>
    <published>2024-05-09T15:05:48.000Z</published>
    <updated>2024-05-10T15:14:03.841Z</updated>
    
    <content type="html"><![CDATA[<br><p>慕课网课程《Java设计模式精讲 Debug方式+内存分析》的学习笔记。</p><span id="more"></span><h1 id="第1章-课程导学"><a href="#第1章-课程导学" class="headerlink" title="第1章 课程导学"></a>第1章 课程导学</h1><ul><li><p>设计模式是工程师必备的知识，也是面试高频考点</p></li><li><p>本课程讲解设计模式的方式：</p><ul><li>设计模式定义</li><li>设计模式应用</li><li>源码解析</li><li>系统学习设计模式</li><li>结合大量场景coding（不枯燥、不空洞）</li><li>动态递进式讲解（场景-UML-代码）</li><li>采用Debug方式及内存分析（更容易理解设计模式）</li><li>JDK及热门开源框架源码解析</li></ul></li><li><p><strong>UML入门</strong></p><ul><li>UML基础</li><li>UML类图</li><li>UML时序图</li><li>UML类关系</li><li>UML记忆技巧</li></ul></li><li><p><strong>7大设计原则</strong></p><ul><li>开闭原则</li><li>依赖倒置原则</li><li>单一职责原则</li><li>接口隔离原则</li><li>迪米特原则</li><li>里氏替换原则</li><li>合成复用原则</li></ul></li><li><p><strong>设计模式</strong></p><ul><li><p><strong>创建型模式</strong></p><ul><li>工厂模式（Factory Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>单例模式（Singleton Pattern）</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ul></li><li><p><strong>结构型模式</strong></p><ul><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>过滤器模式（Filter、Criteria Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ul></li><li><p><strong>行为型模式</strong></p><ul><li>责任链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>观察者模式（Observer Pattern）</li><li>状态模式（State Pattern）</li><li>空对象模式（Null Object Pattern）</li><li>策略模式（Strategy Pattern）</li><li>模板模式（Template Pattern）</li><li>访问者模式（Visitor Pattern）</li></ul></li></ul></li></ul><br><br><br><h1 id="第2章-UML急速入门"><a href="#第2章-UML急速入门" class="headerlink" title="第2章 UML急速入门"></a>第2章 UML急速入门</h1><br><br><br><h1 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h1><br><br><br><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href=""></a></li></ul><br><br><br><h1 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a>Remark</h1><blockquote><ol><li>xxx需要再深入学习</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">![]()</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;图片名称&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片无法正常加载展示！&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;70%&quot;</span>&gt;</span></span><br><span class="line">****</span><br></pre></td></tr></table></figure><br><br>]]></content>
    
    
    <summary type="html">&lt;br&gt;

&lt;p&gt;慕课网课程《Java设计模式精讲 Debug方式+内存分析》的学习笔记。&lt;/p&gt;</summary>
    
    
    
    <category term="design-pattern" scheme="https://sonronzy.github.io/categories/design-pattern/"/>
    
    
    <category term="design-pattern" scheme="https://sonronzy.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>《搞定数据库事务 含seata分布式》Study Notes</title>
    <link href="https://sonronzy.github.io/2024/%E3%80%8A%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1-%E5%90%ABseata%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%8BStudy-Notes/"/>
    <id>https://sonronzy.github.io/2024/%E3%80%8A%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1-%E5%90%ABseata%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%8BStudy-Notes/</id>
    <published>2024-05-01T10:31:19.000Z</published>
    <updated>2024-05-04T15:01:41.988Z</updated>
    
    <content type="html"><![CDATA[<br><h1 id="basic-concept"><a href="#basic-concept" class="headerlink" title="basic concept"></a>basic concept</h1><h2 id="What’s-Transaction"><a href="#What’s-Transaction" class="headerlink" title="What’s Transaction"></a>What’s Transaction</h2><ul><li><strong>定义：</strong> <strong>数据库事务</strong>是<strong>访问</strong>并可能<strong>更新</strong>数据库中各种<strong>数据项</strong>的一个<strong>程序执行单元(unit)</strong></li><li><strong>组成：</strong> 一个数据库事务通常包含对数据库进行<strong>读</strong>或<strong>写</strong>的一个<strong>操作序列</strong></li><li><strong>目的：</strong><ul><li>（1）为数据库操作提供了一个<strong>从失败中恢复到正常状态的方法</strong>，同时提供了数据库即使在<strong>异常状态下仍能保持一致性的方法</strong></li><li>（2）当多个应用程序在并发访问数据库时，可以<strong>在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰</strong></li></ul></li></ul><br><br><h2 id="事务目标（目的）分析"><a href="#事务目标（目的）分析" class="headerlink" title="事务目标（目的）分析"></a>事务目标（目的）分析</h2><ul><li><p><strong>事务的目的就是要提供3种方法</strong>：</p><ul><li>（1）失败恢复方法</li><li>（2）保持一致性的方法</li><li>（3）操作隔离的方法</li></ul></li><li><p><strong>成功情况下：</strong>能将数据从一种状态变为另外一种状态，并能够持久化</p></li><li><p><strong>异常情况下：</strong></p><ul><li>能将数据恢复到正常状态</li><li>要能保证一致性，包含数据的一致性和约束的一致性</li></ul></li><li><p><strong>并发情况下：</strong>并发的操作之间不能产生相互影响</p></li></ul><br><br><h2 id="Transaction-Features"><a href="#Transaction-Features" class="headerlink" title="Transaction Features"></a>Transaction Features</h2><blockquote><p>事务的目的指向了事务的特性</p></blockquote><ul><li><strong>原子性Actomicity</strong>：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行</li><li><strong>一致性 Consistency</strong>：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束</li><li><strong>隔离性 Isolation</strong>：多个事务并发执行时，一个事务的执行不应影响其他事务的执行</li><li><strong>持久性 Durability</strong>：一个事务一旦提交，他对数据库的修改应该永久保存在数据库中</li></ul><br><br><h2 id="Transaction-Concurrency-Exception"><a href="#Transaction-Concurrency-Exception" class="headerlink" title="Transaction Concurrency Exception"></a>Transaction Concurrency Exception</h2><ul><li><strong>Update Lost&#x2F;回滚丢失&#x2F;第一类更新丢失</strong>：此种更新丢失是因为回滚的原因，所以也叫回滚丢失</li><li><strong>Seconde Update Lost&#x2F;覆盖丢失&#x2F;第二类更新丢失</strong>：此种更新丢失是因为更新被其他事务给覆盖了，也可以叫覆盖丢失</li><li><strong>Dirty Read&#x2F;脏读</strong>：此种异常时因为一个事务读取了另一个事务修改了但是未提交的数据</li><li><strong>Not Repeatable Read&#x2F;不可重复读</strong>：一个事务对同一行数据执行了两次或更多次查询，但是却得到了不同的结果</li><li><strong>Phantom Read&#x2F;幻读</strong>：幻读和不可重复读有点像，只是针对的不是数据的值而是数据的数量</li></ul><h3 id="Update-Lost-回滚丢失"><a href="#Update-Lost-回滚丢失" class="headerlink" title="Update Lost&#x2F;回滚丢失"></a>Update Lost&#x2F;回滚丢失</h3><table><thead><tr><th align="center">事务A</th><th align="center">事务B</th></tr></thead><tbody><tr><td align="center">查询数据得到初始值10</td><td align="center">查询数据得到初始值10</td></tr><tr><td align="center">更新为10+1&#x3D;11</td><td align="center">更新10+2&#x3D;12</td></tr><tr><td align="center">提交</td><td align="center">失败回滚</td></tr><tr><td align="center"></td><td align="center">数据回到初始化状态10，导致事务A的更新丢失了<br>由于回滚导致丢失所以叫做回滚丢失</td></tr></tbody></table><h3 id="Seconde-Update-Lost-覆盖丢失"><a href="#Seconde-Update-Lost-覆盖丢失" class="headerlink" title="Seconde Update Lost&#x2F;覆盖丢失"></a>Seconde Update Lost&#x2F;覆盖丢失</h3><table><thead><tr><th align="center">事务A</th><th align="center">事务B</th></tr></thead><tbody><tr><td align="center">查询数据得到初始值10</td><td align="center">查询数据得到初始值10</td></tr><tr><td align="center">更新为10+1&#x3D;11</td><td align="center">更新10+2&#x3D;12</td></tr><tr><td align="center">提交</td><td align="center">提交</td></tr><tr><td align="center"></td><td align="center">最终结果变为12<br>由于事务B是从10开始计算，并不知道数据已经发生了变化，所以导致事务A的更新结果被覆盖了，所以叫覆盖更新。</td></tr></tbody></table><h3 id="Dirty-Read"><a href="#Dirty-Read" class="headerlink" title="Dirty Read"></a>Dirty Read</h3><table><thead><tr><th align="center">事务A</th><th align="center">事务B</th></tr></thead><tbody><tr><td align="center">查询数据得到初始值10</td><td align="center">查询数据得到初始值10</td></tr><tr><td align="center">更新为10+1&#x3D;11</td><td align="center">再此读取数值的到11</td></tr><tr><td align="center"></td><td align="center">更新数据11+1&#x3D;12</td></tr><tr><td align="center">回滚</td><td align="center">提交</td></tr><tr><td align="center"></td><td align="center">最终数据变为12<br>由于读取到的数据11被回滚了，结果是错误的，读取到了脏数据</td></tr></tbody></table><h3 id="Not-Repeatable-Read"><a href="#Not-Repeatable-Read" class="headerlink" title="Not Repeatable Read"></a>Not Repeatable Read</h3><table><thead><tr><th align="center">事务A</th><th align="center">事务B</th></tr></thead><tbody><tr><td align="center">查询数据得到初始值10</td><td align="center">查询数据得到初始值10</td></tr><tr><td align="center"></td><td align="center">再此读取数据得到11</td></tr><tr><td align="center"></td><td align="center">在一个事务内两次对同一条数据查询，得到的结果是不同的，因此叫做不可重复读</td></tr></tbody></table><h3 id="Phantom-Read"><a href="#Phantom-Read" class="headerlink" title="Phantom Read"></a>Phantom Read</h3><table><thead><tr><th align="center">事务A</th><th align="center">事务B</th></tr></thead><tbody><tr><td align="center">查询数据有11条</td><td align="center">查询数据有是一条</td></tr><tr><td align="center">更新全部数据为1</td><td align="center">插入一条数据</td></tr><tr><td align="center">查询结果由一条没被更新，比原来多了一条</td><td align="center"></td></tr><tr><td align="center">仿佛全表更新语句不正常，自己出现了幻觉，因此叫幻读</td><td align="center"></td></tr></tbody></table><br><br><h2 id="Transaction-Isolation-Level"><a href="#Transaction-Isolation-Level" class="headerlink" title="Transaction Isolation Level"></a>Transaction Isolation Level</h2><h3 id="Read-Uncommitted"><a href="#Read-Uncommitted" class="headerlink" title="Read Uncommitted"></a>Read Uncommitted</h3><ul><li>即使一个事务的更新语句没有提交，但是别的事务可以读到这个改变</li><li>无法消除任何事务并发异常</li></ul><h3 id="Read-Committed"><a href="#Read-Committed" class="headerlink" title="Read Committed"></a>Read Committed</h3><ul><li>一个事务只能看到其他事务的已经提交的更新，看不到未提交的更新</li><li>消除了脏读和第一类丢失更新</li><li>这是大多数数据库的默认隔离级别：<strong>Oracle、SqlServer</strong></li></ul><h3 id="Repeatable-Read"><a href="#Repeatable-Read" class="headerlink" title="Repeatable Read"></a>Repeatable Read</h3><ul><li>一个事务中进行两次或多次同样的对于数据内容的查询，得到的结果是一样的，但不保证对于数据条数的查询是一样的，只要存在读改行数据就禁止写</li><li>消除了不可重复读和第二类更新丢失</li><li><strong>这是Mysql数据库的默认隔离级别</strong></li></ul><h3 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h3><ul><li>事务执行的时候不允许别的事务并发执行，完全串行化的读，只要存在读就禁止写，但可以同时读</li><li>消除了幻读</li><li>这是事务隔离的最高级别，虽然最安全最省心，但是效率太低，一般不会用</li></ul><h3 id="各种隔离级别能解决哪些并发异常"><a href="#各种隔离级别能解决哪些并发异常" class="headerlink" title="各种隔离级别能解决哪些并发异常"></a>各种隔离级别能解决哪些并发异常</h3><table><thead><tr><th align="center">隔离级别\并发异常</th><th align="center">回滚丢失</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">覆盖丢失</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">读未提交</td><td align="center"><font color=red>×</font></td><td align="center"><font color=red>×</font></td><td align="center"><font color=red>×</font></td><td align="center"><font color=red>×</font></td><td align="center"><font color=red>×</font></td></tr><tr><td align="center">读已提交</td><td align="center"><font color=green>✓</font></td><td align="center"><font color=green>✓</font></td><td align="center"><font color=red>×</font></td><td align="center"><font color=red>×</font></td><td align="center"><font color=red>×</font></td></tr><tr><td align="center">可重复读</td><td align="center"><font color=green>✓</font></td><td align="center"><font color=green>✓</font></td><td align="center"><font color=green>✓</font></td><td align="center"><font color=green>✓</font></td><td align="center"><font color=red>×</font></td></tr><tr><td align="center">串行化</td><td align="center"><font color=green>✓</font></td><td align="center"><font color=green>✓</font></td><td align="center"><font color=green>✓</font></td><td align="center"><font color=green>✓</font></td><td align="center"><font color=green>✓</font></td></tr></tbody></table><br><br><br><h1 id="Transaction-Isolation-Operator"><a href="#Transaction-Isolation-Operator" class="headerlink" title="Transaction Isolation Operator"></a>Transaction Isolation Operator</h1><h2 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h2><ul><li>环境信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 使用的数据库以及版本信息</span><br><span class="line">mysql&gt; select version();</span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 5.7.26    |</span><br><span class="line">+-----------+</span><br><span class="line"></span><br><span class="line"># MySQL InnoDB引擎的默认隔离级别为REPEATABLE-READ</span><br></pre></td></tr></table></figure><ul><li>操作指令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 查看数据库版本：</span><br><span class="line">select version();</span><br><span class="line"></span><br><span class="line"># 查看隔离级别：</span><br><span class="line">select @@session.tx_isolation;</span><br><span class="line"></span><br><span class="line"># （会话级）修改隔离级别：</span><br><span class="line">set @@session.tx_isolation=&#x27;参数&#x27;;</span><br><span class="line"># 可选参数</span><br><span class="line">set @@session.tx_isolation=&#x27;READ-UNCOMMITTED&#x27;;</span><br><span class="line">set @@session.tx_isolation=&#x27;READ-COMMITTED&#x27;;</span><br><span class="line">set @@session.tx_isolation=&#x27;REPEATABLE-READ&#x27;;</span><br><span class="line">set @@session.tx_isolation=&#x27;SERIALIZABLE&#x27;;</span><br><span class="line"></span><br><span class="line"># 开启事务：</span><br><span class="line">start transaction;</span><br><span class="line"></span><br><span class="line"># 提交：</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"># 回滚</span><br><span class="line">rollback;</span><br></pre></td></tr></table></figure><br><br><br><br><br><h1 id="Spring-Transaction"><a href="#Spring-Transaction" class="headerlink" title="Spring Transaction"></a>Spring Transaction</h1><h2 id="Spring事务注解"><a href="#Spring事务注解" class="headerlink" title="Spring事务注解"></a>Spring事务注解</h2><table><thead><tr><th align="left">参数名称</th><th>功能描述</th></tr></thead><tbody><tr><td align="left">readOnly</td><td>该属性用于<font color=red>设置当前事务是否为只读事务，设置为true表示只读，false则表示可读写，默认值为false。</font><br>例如：@Transactional(readOnly&#x3D;true)</td></tr><tr><td align="left">rollbackFor</td><td>该属性用于<font color=red>设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚。</font><br>例如：指定单一异常类：@Transactional(rollbackFor&#x3D;RuntimeException.class)<br/>指定多个异常类：@Transactional(rollbackFor&#x3D;{RuntimeException.class, Exception.class})</td></tr><tr><td align="left">rollbackForClassName</td><td>该属性用于<font color=red>设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。</font><br>例如：指定单一异常类名称@Transactional(rollbackForClassName&#x3D;”RuntimeException”)<br/>指定多个异常类名称：@Transactional(rollbackForClassName&#x3D;{“RuntimeException”,”Exception”})</td></tr><tr><td align="left">noRollbackFor</td><td>该属性用于<font color=red>设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚。</font><br>例如：指定单一异常类：@Transactional(noRollbackFor&#x3D;RuntimeException.class)<br/>指定多个异常类：@Transactional(noRollbackFor&#x3D;{RuntimeException.class, Exception.class})</td></tr><tr><td align="left">noRollbackForClassName</td><td>该属性用于<font color=red>设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，不进行事务回滚。</font><br/>例如：指定单一异常类名称：@Transactional(noRollbackForClassName&#x3D;”RuntimeException”)<br/>指定多个异常类名称：@Transactional(noRollbackForClassName{“RuntimeException”,”Exception”})</td></tr><tr><td align="left">propagation</td><td>该属性用于<font color=red>设置事务的传播行为。</font><br/>例如Transactional(propagation&#x3D;Propagation.NOT_SUPPORTED,readOnly&#x3D;true)</td></tr><tr><td align="left">isolation</td><td>该属性用于<font color=red>设置底层数据库的事务隔离级别，事务隔离级别用于处理多事务并发的情况，通常使用数据库的默认隔离级别即可，基本不需要进行设置</font></td></tr><tr><td align="left">timeout</td><td>该属性用于<font color=red>设置事务的超时秒数，默认值为-1表示永不超时</font></td></tr></tbody></table><br><br><h2 id="Spring事务传播行为"><a href="#Spring事务传播行为" class="headerlink" title="Spring事务传播行为"></a>Spring事务传播行为</h2><table><thead><tr><th>传播行为</th><th>含义</th></tr></thead><tbody><tr><td>REQUIRED</td><td>表示当前方法必须在一个具有事务的上下文中运行，如有客户端有事务在进行，那么被调用端将在该事务中运行，否则的话重新开启一个事务。（如果被调用端发生异常，那么调用端和被调用端事务都将回滚）</td></tr><tr><td>SUPPORTS</td><td>表示当前方法不必需要具有一个事务上下文，但是如果有一个事务的话，它也可以在这个事务中运行</td></tr><tr><td>MANDATORY</td><td>表示当前方法必须在一个事务中运行，如果没有事务，将抛出异常</td></tr><tr><td>NESTED</td><td>表示如果当前方法正有一个事务在运行中，则该方法应该运行在一个嵌套事务中，被嵌套的事务可以独立于被封装的事务中进行提交或者回滚。如果封装事务存在，并且外层事务抛出异常回滚，那么内层事务必须回滚，反之，内层事务并不影响外层事务。如果封装事务不存在，则同PROPAGATION_REQUIRED的一样</td></tr><tr><td>NEVER</td><td>表示当方法务不应该在一个事务中运行，如果存在一个事务，则抛出异常</td></tr><tr><td>REQUIRES_NEW</td><td>表示当前方法必须运行在它自己的事务中。一个新的事务将启动，而且如果有一个现有的事务在运行的话，则这个方法将在运行期被挂起，直到新的事务提交或者回滚才恢复执行。</td></tr><tr><td>NOT_SUPPORTED</td><td>表示该方法不应该在一个事务中运行。如果有一个事务正在运行，他将在运行期被挂起，直到这个事务提交或者回滚才恢复执行</td></tr></tbody></table><br><br><h2 id="Spring隔离级别"><a href="#Spring隔离级别" class="headerlink" title="Spring隔离级别"></a>Spring隔离级别</h2><table><thead><tr><th>隔离级别</th><th>含义</th></tr></thead><tbody><tr><td>idefault</td><td>使用数据库默认的事务隔离级别</td></tr><tr><td>read_uncommitted</td><td>允许读取尚未提交的修改，可能导致脏读、幻读和不可重复读</td></tr><tr><td>read_committed</td><td>允许从已经提交的事务读取，可防止脏读、但幻读，不可重复读仍然有可能发生</td></tr><tr><td>repeatable_read</td><td>对相同字段的多次读取的结果是一致的，除非数据被当前事务自生修改。可防止脏读和不可重复读，但幻读仍有可能发生</td></tr><tr><td>serializable</td><td>完全服从acid隔离原则，确保不发生脏读、不可重复读、和幻读，但执行效率最低。</td></tr></tbody></table><br><br><br><h1 id="Distributed-Transactions"><a href="#Distributed-Transactions" class="headerlink" title="Distributed Transactions"></a>Distributed Transactions</h1><br><br><br><h1 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h1><br><br><br><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href=""></a></li></ul><br><br><br><h1 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a>Remark</h1><blockquote><ol><li>事务并发异常和事务隔离级别非常非常重要需要熟记</li><li>需要整理不同隔离级别的并发性能，需要理解并记忆不同隔离级别为何能消除某些事务并发异常</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">![]()</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;图片名称&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片无法正常加载展示！&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;70%&quot;</span>&gt;</span></span><br><span class="line">****</span><br></pre></td></tr></table></figure><br><br>]]></content>
    
    
    <summary type="html">课程《搞定数据库事务 含seata分布式》学习笔记</summary>
    
    
    
    <category term="Distributed-Transaction" scheme="https://sonronzy.github.io/categories/Distributed-Transaction/"/>
    
    <category term="Transaction" scheme="https://sonronzy.github.io/categories/Distributed-Transaction/Transaction/"/>
    
    
    <category term="Distributed-Transaction" scheme="https://sonronzy.github.io/tags/Distributed-Transaction/"/>
    
    <category term="Transaction" scheme="https://sonronzy.github.io/tags/Transaction/"/>
    
  </entry>
  
  <entry>
    <title>《程序员职业规划手册》Study Notes</title>
    <link href="https://sonronzy.github.io/2024/%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E6%89%8B%E5%86%8C%E3%80%8BStudy-Notes/"/>
    <id>https://sonronzy.github.io/2024/%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E6%89%8B%E5%86%8C%E3%80%8BStudy-Notes/</id>
    <published>2024-04-30T10:00:50.000Z</published>
    <updated>2024-05-01T15:21:07.547Z</updated>
    
    <content type="html"><![CDATA[<br><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;最近学习了<strong>极客时间</strong>上<strong>雪梅</strong>老师的专栏《程序员职业规划手册》，收获不小。整理了学习笔记，便于复习、消化。</p><br><br><br><h1 id="开篇词"><a href="#开篇词" class="headerlink" title="开篇词"></a>开篇词</h1><h2 id="开篇词｜超越“内卷”，拿回你的职业主动权"><a href="#开篇词｜超越“内卷”，拿回你的职业主动权" class="headerlink" title="开篇词｜超越“内卷”，拿回你的职业主动权"></a>开篇词｜超越“内卷”，拿回你的职业主动权</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li><strong>职业发展的焦虑与困惑</strong><ul><li>AI 在发展，技术岗未来还有机会吗？</li><li>35+ 技术人危机</li><li>卷不动，躺不平，怎么破</li></ul></li></ul><h3 id="怎么理解（认知）职业发展？"><a href="#怎么理解（认知）职业发展？" class="headerlink" title="怎么理解（认知）职业发展？"></a>怎么理解（认知）职业发展？</h3><img                           lazyload                       alt="image"                       data-src="https://github.com/sonronzy/picx-images-hosting/raw/master/sonronzy-image.1ov8jhiq2u.png"                         width="70%"                 ><ul><li><p><strong>（1）职业发展没有确定的路径，是打“移动靶”</strong></p><ul><li>市场一直在变化，企业需求会变，岗位要求会变；职业发展做不到一次发展就万事大吉；</li><li>要抬头看市场，了解变化背后的规律，看到“技术”这条路的本质。不断调整，找到自己的阶段定位</li></ul></li><li><p><strong>（2）职业发展，就是不断了解自己，发挥优势的过程</strong></p><ul><li>职业发展没有标准答案</li><li>认清优势，扬长避短。只要个人优势和目标匹配，推动目标的实现就很好</li></ul></li><li><p><strong>（3）职业发展是自己的事</strong></p><ul><li>要理清自己与企业的关系</li></ul></li></ul><blockquote><p>在雇佣关系中，企业提供岗位，是希望员工给客户创造的价值，给企业创造利润。企业提供的导师、培训，都是为了让员工更好地为企业服务。</p><p>在这段“雇佣关系”中，除了薪水，“收获多或少”的主动权完全在我们手里。你可以选择“给多少钱干多少事”，这里不行换一个地方打工，也可以在项目中不断地复盘总结，提升自己的能力，为下个阶段打好基石。没有人会逼你提升，只是假以时日，前者与后者的发展会千差万别。</p></blockquote><ul><li><strong>（4）职业发展也不只有升职加薪</strong><ul><li>找到自己不同人生阶段的职业目标和幸福感同样重要</li><li>思考：当前的状态是朝着“我”期待的方向前行，还是被裹挟着？</li></ul></li></ul><h3 id="怎么拿回职业发展主动权？"><a href="#怎么拿回职业发展主动权？" class="headerlink" title="怎么拿回职业发展主动权？"></a>怎么拿回职业发展主动权？</h3><ul><li><p><strong>（1）追问经典问题，解决大块问题</strong></p><ul><li>35+ 技术人都去哪里了？</li><li>研发、测试、运维不同岗位的职业发展路径是什么？</li><li>“大厂卷”“去国企躺平”怎么选？</li><li>要不要转管理？</li><li><strong>梳理技术人职业发展的 4 个经典阶段</strong>，找到自己的位置和方向</li></ul></li><li><p><strong>（2）向外看</strong></p><ul><li>宏观：认识市场，在变化时代下，技术岗的发展趋势是什么样的？</li><li>中观：从职场、企业角度，读懂职场的游戏规则，客观地认识职场中的事和人</li><li>微观：认识晋升的本质，理解晋升成功的述职模型</li></ul></li><li><p><strong>（3）向内看</strong></p><ul><li>理清技术人职场要修炼的软硬技能到底有哪些？如何学习提升这些能力？</li><li>挖掘自己的优势和潜能，重新认识自我，找到适合自己的路径</li><li>根据自己的优劣势，构建最合适的职业发展护城河</li></ul></li></ul><h3 id="重启职业发展之路"><a href="#重启职业发展之路" class="headerlink" title="重启职业发展之路"></a>重启职业发展之路</h3><ul><li>当下的我们，面临的是业务增速放缓甚至停滞，大厂降本增效甚至裁员，35+ 危机像空气一样蔓延……</li><li>这正是我们自我觉醒的机会，是一次找回勇气，重新审视自己，继续向前的契机。</li><li>这一路打怪升级，其实是在“借事修人”，提升我们的认知和能力</li></ul><br><br><br><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href=""></a></li></ul><br><br><br><h1 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a>Remark</h1><blockquote><ol><li>xxx需要再深入学习</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">![]()</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;图片名称&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片无法正常加载展示！&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;70%&quot;</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span></span><br><span class="line">****</span><br></pre></td></tr></table></figure><br><br>]]></content>
    
    
    <summary type="html">了解职业发展案例，洞悉职业问题根本逻辑，认清自我，找到最契合的发展方向</summary>
    
    
    
    
    <category term="职业发展" scheme="https://sonronzy.github.io/tags/%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95/"/>
    
  </entry>
  
</feed>
